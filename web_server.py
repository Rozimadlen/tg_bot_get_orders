import os
import json
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from shared_db import db

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'
socketio = SocketIO(app, cors_allowed_origins="*")

# –í–µ–±-–º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    return render_template('dashboard.html')

@app.route('/api/status')
def get_status():
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    stats = db.get_leads_stats()
    return jsonify({
        'telegram_connected': True,  # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        'ai_connected': bool(os.getenv("TOGETHER_API_KEY")),
        'monitoring_active': True,
        **stats
    })

@app.route('/api/settings', methods=['GET', 'POST'])
def manage_settings():
    """API: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞"""
    if request.method == 'POST':
        data = request.json
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data}")
        return jsonify({'status': 'success', 'settings': data})
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑ config.json)
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            settings = json.load(f)
        return jsonify(settings)
    except FileNotFoundError:
        return jsonify({})

@app.route('/api/leads')
def get_leads():
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤"""
    limit = request.args.get('limit', 20, type=int)
    leads = db.get_recent_leads(limit)
    return jsonify(leads)

@app.route('/api/keywords', methods=['GET', 'POST', 'DELETE'])
def manage_keywords():
    """API: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    if request.method == 'POST':
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        data = request.json
        phrase = data.get('phrase', '').strip().lower()
        
        if phrase:
            success = db.add_keyword(phrase)
            if success:
                return jsonify({'status': 'success', 'message': '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'})
            else:
                return jsonify({'status': 'error', 'message': '–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'})
        
        return jsonify({'status': 'error', 'message': '–ü—É—Å—Ç–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'})
    
    elif request.method == 'DELETE':
        # –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        phrase = request.args.get('phrase')
        success = db.remove_keyword(phrase)
        if success:
            return jsonify({'status': 'success', 'message': '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ'})
        else:
            return jsonify({'status': 'error', 'message': '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'})
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = db.get_keywords()
    return jsonify(keywords)

@app.route('/api/test-keyword', methods=['POST'])
def test_keyword():
    """API: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    data = request.json
    message = data.get('message', '')
    
    if not message:
        return jsonify({'status': 'error', 'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    keywords = db.get_keywords()
    hit = False
    text_lower = message.lower()
    
    for phrase in keywords:
        if phrase in text_lower:
            hit = True
            break
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    quality = analyze_lead_quality_simple(message)
    
    return jsonify({
        'status': 'success',
        'hit': hit,
        'quality': quality,
        'message': '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ' if hit else '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    })

def analyze_lead_quality_simple(text: str) -> dict:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–¥–∞"""
    score = 0
    reasons = []
    text_lower = text.lower()
    
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    positive = [
        ("–±—é–¥–∂–µ—Ç", 3, "üí∞ –£–ø–æ–º–∏–Ω–∞–µ—Ç –±—é–¥–∂–µ—Ç"),
        ("—Å—Ä–æ—á–Ω–æ", 2, "‚ö° –°—Ä–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"),
        ("–æ–ø—ã—Ç–Ω–æ–≥–æ", 2, "‚≠ê –ò—â–µ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ"),
        ("–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", 2, "‚≠ê –ò—â–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞"),
    ]
    
    for signal, points, reason in positive:
        if signal in text_lower:
            score += points
            reasons.append(reason)
    
    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    negative = [
        ("–±–µ—Å–ø–ª–∞—Ç–Ω–æ", -5, "üö´ –ò—â–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ"),
        ("–¥–µ—à–µ–≤–æ", -2, "üí∏ –ò—â–µ—Ç –¥–µ—à–µ–≤–æ"),
        ("—Å—Ç–∞–∂–µ—Ä", -2, "üë∂ –ò—â–µ—Ç —Å—Ç–∞–∂–µ—Ä–∞"),
    ]
    
    for signal, points, reason in negative:
        if signal in text_lower:
            score += points
            reasons.append(reason)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    if score >= 5:
        quality = "üî• –ì–û–†–Ø–ß–ò–ô –õ–ò–î"
    elif score >= 2:
        quality = "üü° –•–û–†–û–®–ò–ô –õ–ò–î"
    elif score >= 0:
        quality = "üü¢ –û–ë–´–ß–ù–´–ô –õ–ò–î"
    else:
        quality = "üî¥ –ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û"
    
    return {
        "score": score,
        "quality": quality,
        "reasons": reasons
    }

@app.route('/api/chat-sources', methods=['GET', 'POST', 'DELETE'])
def manage_chat_sources():
    """API: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —á–∞—Ç–æ–≤"""
    if request.method == 'POST':
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        data = request.json
        chat_id = data.get('chat_id', '').strip()
        chat_name = data.get('chat_name', chat_id)
        
        if chat_id:
            success = db.add_chat_source(chat_id, chat_name)
            if success:
                return jsonify({'status': 'success', 'message': '–ò—Å—Ç–æ—á–Ω–∏–∫ —á–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω'})
            else:
                return jsonify({'status': 'error', 'message': '–¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'})
        
        return jsonify({'status': 'error', 'message': '–ü—É—Å—Ç–æ–π ID —á–∞—Ç–∞'})
    
    elif request.method == 'DELETE':
        # –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
        chat_id = request.args.get('chat_id')
        success = db.remove_chat_source(chat_id)
        if success:
            return jsonify({'status': 'success', 'message': '–ò—Å—Ç–æ—á–Ω–∏–∫ —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω'})
        else:
            return jsonify({'status': 'error', 'message': '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = db.get_chat_sources()
    return jsonify(sources)

@app.route('/api/pending-responses')
def get_pending_responses():
    """API: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    responses = db.get_pending_responses()
    return jsonify(responses)

@app.route('/api/response-action', methods=['POST'])
def handle_response_action():
    """API: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)"""
    data = request.json
    response_id = data.get('response_id')
    action = data.get('action')  # approve, reject, edit
    edited_text = data.get('edited_text', '')
    
    if action == 'approve':
        db.update_response_status(response_id, 'approved')
        message = '–û—Ç–≤–µ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        
    elif action == 'reject':
        db.update_response_status(response_id, 'rejected')
        message = '–û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω'
        
    elif action == 'edit':
        db.update_response_status(response_id, 'pending', edited_text)
        message = '–û—Ç–≤–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω'
    
    return jsonify({'status': 'success', 'message': message})

@app.route('/api/analytics')
def get_analytics():
    """API: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_stats = []
    for i in range(7):
        date = datetime.now().date() - timedelta(days=i)
        stats = db.get_leads_stats(1)  # –ó–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
        weekly_stats.append({
            'date': date.strftime('%Y-%m-%d'),
            'hot': stats.get('hot_leads', 0),
            'good': stats.get('good_leads', 0),
            'normal': stats.get('normal_leads', 0)
        })
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
    total_stats = db.get_leads_stats(7)  # –ó–∞ –Ω–µ–¥–µ–ª—é
    response_data = {
        'responded': total_stats.get('responded', 0),
        'not_responded': total_stats.get('total_leads', 0) - total_stats.get('responded', 0)
    }
    
    return jsonify({
        'weekly_leads': weekly_stats,
        'response_efficiency': response_data
    })

@app.route('/api/export')
def export_data():
    """API: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    format_type = request.args.get('format', 'csv')
    days = request.args.get('days', 7, type=int)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    leads = db.get_recent_leads(1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 –ª–∏–¥–æ–≤
    
    if format_type == 'csv':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞
        pass
    elif format_type == 'json':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞
        pass
    
    return jsonify({
        'status': 'success',
        'message': f'–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type} –∑–∞ {days} –¥–Ω–µ–π –≥–æ—Ç–æ–≤',
        'download_url': f'/download/export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.{format_type}'
    })

@app.route('/api/scan-leads', methods=['POST'])
def trigger_scan():
    """API: –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–æ–≤"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        print("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω")
        
        return jsonify({
            'status': 'success',
            'message': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)'
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
        })

# WebSocket —Å–æ–±—ã—Ç–∏—è
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections = set()

@socketio.on('connect')
def handle_connect():
    """–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket"""
    print('üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket')
    active_connections.add(request.sid)
    emit('status', {'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'type': 'success'})

@socketio.on('disconnect')
def handle_disconnect():
    """–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket"""
    print('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket')
    active_connections.discard(request.sid)

@socketio.on('new_lead')
def handle_new_lead(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ –æ—Ç Telegram –±–æ—Ç–∞"""
    print(f"üì® –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ª–∏–¥: {data.get('message_text', '')[:50]}...")
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    socketio.emit('lead_update', data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º live feed –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    socketio.emit('live_feed_update', {
        'type': 'new_lead',
        'data': data
    })

@socketio.on('start_monitoring')
def handle_start_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    emit('monitoring_status', {'active': True, 'message': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω'})
    print('‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ WebSocket')

@socketio.on('stop_monitoring')
def handle_stop_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    emit('monitoring_status', {'active': False, 'message': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
    print('‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket')

def create_html_template():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not os.path.exists('templates'):
        os.makedirs('templates')
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ templates")
    
    if not os.path.exists('templates/dashboard.html'):
        print("‚ö†Ô∏è –§–∞–π–ª templates/dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ dashboard.html –≤ –ø–∞–ø–∫—É templates/")
        return False
    
    return True

def add_test_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        test_keywords = [
            "–∏—â—É –≤–∏–¥–µ–æ–ø—Ä–æ–¥—é—Å–µ—Ä–∞", "–Ω—É–∂–µ–Ω –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä", "—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä",
            "–∫—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∏–¥–µ–æ", "–≤–∏–¥–µ–æ–≥—Ä–∞—Ñ –Ω—É–∂–µ–Ω", "–∏—â—É –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ–∞"
        ]
        
        for keyword in test_keywords:
            db.add_keyword(keyword)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–∑–æ–≤–∞ add_lead
        test_leads = [
            {
                "chat_source": "@videomaker_chat",
                "sender_id": 12345,
                "sender_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                "message_text": "–ò—â—É –≤–∏–¥–µ–æ–ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è YouTube –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ë—é–¥–∂–µ—Ç 200–∫",
                "quality_score": 6,
                "quality_label": "üî• –ì–û–†–Ø–ß–ò–ô –õ–ò–î",
                "quality_reasons": ["üí∞ –£–ø–æ–º–∏–Ω–∞–µ—Ç –±—é–¥–∂–µ—Ç", "‚≠ê –ò—â–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞"],
                "chat_name": "Video Makers"
            },
            {
                "chat_source": "@creative_group",
                "sender_id": 23456,
                "sender_name": "–ú–∞—Ä–∏—è",
                "message_text": "–ù—É–∂–µ–Ω –º–æ–Ω—Ç–∞–∂–µ—Ä –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞",
                "quality_score": 3,
                "quality_label": "üü° –•–û–†–û–®–ò–ô –õ–ò–î",
                "quality_reasons": ["‚ö° –°—Ä–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"],
                "chat_name": "Creative Group"
            },
            {
                "chat_source": "@business_chat",
                "sender_id": 34567,
                "sender_name": "–ê–ª–µ–∫—Å–µ–π",
                "message_text": "–ö—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π?",
                "quality_score": 1,
                "quality_label": "üü¢ –û–ë–´–ß–ù–´–ô –õ–ò–î",
                "quality_reasons": [],
                "chat_name": "Business Chat"
            },
            {
                "chat_source": "@freelance_hub",
                "sender_id": 45678,
                "sender_name": "–ê–Ω–Ω–∞",
                "message_text": "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—É—é —Å—ä–µ–º–∫—É",
                "quality_score": 4,
                "quality_label": "üü° –•–û–†–û–®–ò–ô –õ–ò–î",
                "quality_reasons": ["üé¨ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"],
                "chat_name": "Freelance Hub"
            }
        ]
        
        for lead_data in test_leads:
            db.add_lead(**lead_data)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ** –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Telegram Bot Dashboard")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML
    if not create_html_template():
        print("üîó –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞")
        exit(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_test_data()
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:8080")
    print("üìä Dashboard –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("="*60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        socketio.run(app, host='0.0.0.0', port=8080, debug=False)
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
