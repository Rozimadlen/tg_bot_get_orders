#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–Ω–æ–π —Ñ–∞–π–ª –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ asyncio
"""

import os
import sys
import time
import signal
import subprocess
import argparse
from pathlib import Path
import multiprocessing as mp

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'config.json',
        'keywords.txt',
        'chats.txt',
        '.env',
        'shared_db.py',
        'app.py',
        'web_server.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏
        os.makedirs('templates', exist_ok=True)
        os.makedirs('data/exports', exist_ok=True)
        os.makedirs('data/logs', exist_ok=True)
        os.makedirs('sessions', exist_ok=True)
        
        return False
    
    return True

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
    try:
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if '#' in value:
                        value = value.split('#')[0].strip()
                    os.environ[key.strip()] = value.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        return False
    
    required_env = ['API_ID', 'API_HASH']
    missing_env = []
    
    for env_var in required_env:
        value = os.getenv(env_var)
        if not value:
            missing_env.append(env_var)
        else:
            masked_value = value[:3] + "..." if len(value) > 3 else "***"
            print(f"   ‚úÖ {env_var}: {masked_value}")
    
    if missing_env:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_env}")
        return False
    
    return True

def kill_existing_processes():
    """–£–±–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    try:
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—Ç–∞–º
        for port in [8080]:
            try:
                result = subprocess.run(['lsof', '-ti', f':{port}'],
                                      capture_output=True, text=True)
                if result.stdout.strip():
                    pids = result.stdout.strip().split('\n')
                    for pid in pids:
                        try:
                            subprocess.run(['kill', '-9', pid], check=False)
                            print(f"üî´ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}: PID {pid}")
                        except:
                            pass
            except:
                pass
        
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å app.py –∏–ª–∏ main.py
        try:
            result = subprocess.run(['pgrep', '-f', 'python.*app.py'],
                                  capture_output=True, text=True)
            if result.stdout.strip():
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    try:
                        subprocess.run(['kill', '-9', pid], check=False)
                        print(f"üî´ –£–±–∏—Ç Python –ø—Ä–æ—Ü–µ—Å—Å: PID {pid}")
                    except:
                        pass
        except:
            pass
            
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def cleanup_database():
    """–û—á–∏—â–∞–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –£–¥–∞–ª—è–µ–º WAL –∏ SHM —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        db_files = [
            'data/shared_bot.sqlite-wal',
            'data/shared_bot.sqlite-shm',
            'shared_bot_data.sqlite-wal',
            'shared_bot_data.sqlite-shm',
            'bot_data.sqlite-wal',
            'bot_data.sqlite-shm'
        ]
        
        for db_file in db_files:
            if os.path.exists(db_file):
                os.remove(db_file)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {db_file}")
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

def run_telegram_bot_process():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º app.py —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º both
        process = subprocess.Popen([
            sys.executable, 'app.py', '--mode', 'both'
        ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        return None

def run_web_server_process():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º web_server.py
        process = subprocess.Popen([
            sys.executable, 'web_server.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def monitor_process(process, name):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    while True:
        if process.poll() is not None:
            print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
            break
        time.sleep(5)

def run_combined_system():
    """–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö TELEGRAM BOT SYSTEM (–ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if not check_requirements():
        return
        
    if not check_environment():
        return
    
    # –£–±–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("üî´ –£–±–∏–≤–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    kill_existing_processes()
    
    # –û—á–∏—â–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ë–î
    print("üóëÔ∏è –û—á–∏—â–∞—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ë–î...")
    cleanup_database()
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        subprocess.run([sys.executable, 'simple_debug.py'],
                      timeout=30, check=False)
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    web_process = None
    telegram_process = None
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        web_process = run_web_server_process()
        if not web_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
            return
        
        print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        try:
            import requests
            response = requests.get('http://localhost:8080', timeout=5)
            if response.status_code == 200:
                print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
        except:
            print("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        telegram_process = run_telegram_bot_process()
        if not telegram_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
            return
        
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080")
        print("ü§ñ Telegram –±–æ—Ç: –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if web_process and web_process.poll() is not None:
                print("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                break
                
            if telegram_process and telegram_process.poll() is not None:
                print("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
    finally:
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        if telegram_process:
            try:
                telegram_process.terminate()
                telegram_process.wait(timeout=10)
                print("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                telegram_process.kill()
                print("üî´ Telegram –±–æ—Ç —É–±–∏—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                
        if web_process:
            try:
                web_process.terminate()
                web_process.wait(timeout=10)
                print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                web_process.kill()
                print("üî´ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–±–∏—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
        print("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def run_telegram_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞")
    
    if not check_requirements():
        return
        
    if not check_environment():
        return
    
    cleanup_database()
    
    try:
        subprocess.run([sys.executable, 'app.py', '--mode', 'both'])
    except KeyboardInterrupt:
        print("\nüëã Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def run_web_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    
    if not check_requirements():
        return
    
    cleanup_database()
    
    try:
        subprocess.run([sys.executable, 'web_server.py'])
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°–¢–ê–¢–£–° TELEGRAM BOT SYSTEM")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    files_ok = check_requirements()
    env_ok = check_environment()
    
    print(f"üìÅ –§–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã: {'‚úÖ OK' if files_ok else '‚ùå –û—à–∏–±–∫–∏'}")
    print(f"üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ OK' if env_ok else '‚ùå –û—à–∏–±–∫–∏'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    try:
        result = subprocess.run(['lsof', '-ti', ':8080'],
                              capture_output=True, text=True)
        web_running = bool(result.stdout.strip())
        print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if web_running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    except:
        print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        import sqlite3
        conn = sqlite3.connect('data/shared_bot.sqlite', timeout=5)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM leads")
        leads_count = cursor.fetchone()[0]
        conn.close()
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ OK ({leads_count} –ª–∏–¥–æ–≤)")
    except Exception as e:
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –û—à–∏–±–∫–∞ ({e})")
    
    print("=" * 60)
    
    if files_ok and env_ok:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py --mode combined")
    else:
        print("üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Telegram Bot System - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--mode',
        choices=['combined', 'telegram', 'web', 'status'],
        default='combined',
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã'
    )
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if args.mode == 'combined':
        run_combined_system()
    elif args.mode == 'telegram':
        run_telegram_only()
    elif args.mode == 'web':
        run_web_only()
    elif args.mode == 'status':
        show_status()

if __name__ == '__main__':
    main()
